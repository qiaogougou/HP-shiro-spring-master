<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
	<!-- is actually rather pointless. It declares explicit support 
	for annotation-driven MVC controllers (i.e.@RequestMapping, 
	@Controller, etc), even though support for those is the default
	 behaviour  
	 当我们需要controller返回一个map的json对象时，可以设定<mvc:annotation-driven />
	 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter
	  两个bean,是spring MVC为@Controllers分发请求所必须的。并提供了：数据绑定支持，
	@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，读写XML
	的支持（JAXB），读写JSON的支持（Jackson）-->
	<mvc:annotation-driven />
	
	<!-- 指定静态资源的位置，例如js，css和图片等文件，放到webroot文件夹下 -->
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:default-servlet-handler />
	
	<!-- 启用spring mvc注解  例如 @Required, @Autowired, @PostConstruct-->
	<context:annotation-config />
	
	<!-- 设置使用注解的类所在的包名 -->
	<context:component-scan base-package="com.hp.shiro.simplerbac.controller" />
	
	<!--完成请求和注解pojo的映射。 
	当我们需要controller返回一个map的json对象时，可以设定<mvc:annotation-driven />，
	同时设定<mvc:message-converters> 标签，设定字符集和json处理类 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/plain;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>
	
	
	<!-- <bean
		class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping" />
		 -->
		 
	<!-- 视图解析器，对转向页面的路径解析。prefix：前缀，suffix：后缀 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- <bean id="multipartResolver"  
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/> -->

</beans>